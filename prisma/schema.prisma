// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  phone    String
  password String
  token    Token?

  productInWishlist ProductInWishlist[]
  productInCart     ProductInCart[]
  order             Order[]
}

model Token {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  user         User?   @relation(fields: [userId], references: [id])
  userId       String? @unique @db.ObjectId
  refreshToken String
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String
  price       String
  description String
  typeProduct TypeProduct

  sizes   Sizes[]  @relation(fields: [sizeIds], references: [id])
  sizeIds String[] @db.ObjectId

  category   Categories? @relation(fields: [categoryId], references: [id])
  categoryId String?     @db.ObjectId

  productInWishlist ProductInWishlist[]
  productInCart     ProductInCart[]
  productInOder     ProductInOder[]
}

enum TypeProduct {
  Wear
  Accessories
}

model Sizes {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  size       String    @unique
  product    Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
}

model Categories {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  category String   @unique
  products Product[]
}

model ProductInWishlist {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}

model ProductInCart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  size      String
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}

model ProductInOder {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  size     String
  quantity Int

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   Address?
  netAmount Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  productInOrder ProductInOder[]
}

type Address {
  street String
  city   String
  state  String
  zip    String
}
